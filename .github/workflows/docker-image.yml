name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  repository_dispatch:
    types: [ subcomponent_updated ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # PAT below for WRITE_REGISTRY_PAT  has repo:all and write:packages, with no expiry so it should never really come up unless i want to make them start expiring (might be good for all PATs that are in use in parts of this project, including the digital ocean side of things, to expire at the same time so that i have to update them all together)
    - name: Log in to GitHub Docker Registry
      run: echo "${{ secrets.WRITE_REGISTRY_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # build it - i seemed to get an error with cross repo registry stuff using the GITHUB_TOKEN var for the pw in the registry login above, so i set up a PAT that definitely has permission and it seems to work for all the operations. meh
    - name: Build and push Docker image
      run: |
        set -e  # Exit on any command failure

        source deps.env

        # todo: docker compose this stuff perhaps ....
        # prepare docker network so gotenberg can talk to resume container.
        docker network create my_network

        # run json server container which will serve the private resume data (its about to become not private, but just the subset we want to publish)
        docker run -d -p 3002:3002 --name jsonserver --network my_network ghcr.io/blademccool/resumedata:$RESUMEDATA_REF
        
        # docker run -d -p 3003:3002 --name jsonserver2 --network host ghcr.io/blademccool/resumedata:$RESUMEDATA_REF

        # run resume container - switched to nginx which run on port 80 in the container but i still want to access via port 3000 locally 
        docker run --rm -p 3000:80 -d --name resume --network my_network ghcr.io/blademccool/resume:$RESUME_REF
        #docker run --rm -d --name resume --network my_network ghcr.io/blademccool/resume:$RESUME_REF

        #debug output confirm json server is running (should print some HTML about needing JS to run etc.)
        echo "test jsonserver"
        # curl -i --fail-with-body http://localhost:3002?baseline=chrono
        curl -i --fail-with-body http://localhost:3002?baseline=chrono
        
        echo "totally got here .... (sleep)"
        sleep 10
        echo "woke up moar"
        
        #debug output confirm react app is running (should print some HTML about needing JS to run etc - just want to ensure it is being served and reachable)
        echo "test react app HTML output"
        curl -i --fail-with-body http://localhost:3000
        
        # run gotenberg
        docker run --rm -p 80:80 -d --name gotenberg --network my_network gotenberg/gotenberg:8 gotenberg --api-port=80 --api-timeout=10s --libreoffice-disable-routes --log-level=debug

        echo "try to sleep for 10s before trying to talk to things (json server or nginx resume react app server and gotenberg)"
        sleep 10
        echo "woke up"
        
        docker ps

        # direct gotenberg to produce a pdf and output into ./web which will be bundled into the docker image.
        # curl -v --fail --request POST http://localhost:80/forms/chromium/convert/url --form "url=http://resume?jsonserver=jsonserver:3002&baseline=chrono" --form "waitForExpression=window.contentLoaded===true" -o ./web/Chris_Hagglund_Resume.pdf  || { echo "PDF generation failed"; exit 1; }
        # curl -i --fail --request POST http://localhost:80/forms/chromium/convert/url --form "url=http://resume?jsonserver=jsonserver:3002&baseline=chrono" -o ./web/Chris_Hagglund_Resume.pdf  || { echo "PDF generation failed"; exit 1; }
        # echo "PDF generated successfully. (contents remain to be verified)"
        
        curl -i --request POST http://localhost:80/forms/chromium/convert/url --form "url=http://resume?jsonserver=jsonserver:3002&baseline=chrono" -o ./web/Chris_Hagglund_Resume.pdf
        docker logs gotenberg        

        # Run Ghostscript to convert the PDF to text and check for errors
        docker run --rm -v $PWD/web:/workspace minidocks/ghostscript:latest \
          gs -sDEVICE=txtwrite -o /workspace/output.txt /workspace/Chris_Hagglund_Resume.pdf

        # maybe also check for "Please check the data and try again." if that kind of error from the React project ever happens.
        if grep -q "Uncaught runtime errors" ./web/output.txt; then
          echo "Ghostscript found 'Uncaught runtime errors' in the PDF, failing the pipeline."
          exit 1
        else
          echo "No 'Uncaught runtime errors' found in the PDF."
        fi
        cat web/output.txt #inspect it

        # place correct resumedata into local file system for bundling into final site
        mkdir -p replaceinbuild
        curl http://localhost:3002?baseline=chrono -o replaceinbuild/resumedata.json
        # bundle the site up in an nginx image, with the web and resume files copied in
        docker build . -t ghcr.io/blademccool/chws-website:${{ github.sha }} --build-arg RESUME_REF=$RESUME_REF
        docker push ghcr.io/blademccool/chws-website:${{ github.sha }}

    # if we're going to run deploy: below, we should tag latest (do it for repository_dispatch and push event, do not do it for pull_request)
    - name: Tag latest Docker image
      if: github.event_name == 'repository_dispatch' || github.event_name == 'push'
      run: |
        docker tag ghcr.io/blademccool/chws-website:${{ github.sha }} ghcr.io/blademccool/chws-website:latest
        docker push ghcr.io/blademccool/chws-website:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'repository_dispatch' || github.event_name == 'push' #do not deploy in PRs that are not merged (do not deploy if event_name is pull_request)
    steps:
      # deploy using our hosted app id in digital ocean app platform, using the digital ocean pat we created in our account over there.
      # app id bb3fe71e-b9c2-4163-aca2-1d6dd0ac4c02 is our website component in digital ocean app platform.
    - name: Deploy
      run: >
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
          "https://api.digitalocean.com/v2/apps/bb3fe71e-b9c2-4163-aca2-1d6dd0ac4c02/deployments"