name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  repository_dispatch:
    types: [ subcomponent_updated ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # PAT below for WRITE_REGISTRY_PAT  has repo:all and write:packages, with no expiry so it should never really come up unless i want to make them start expiring (might be good for all PATs that are in use in parts of this project, including the digital ocean side of things, to expire at the same time so that i have to update them all together)
    - name: Log in to GitHub Docker Registry
      run: echo "${{ secrets.WRITE_REGISTRY_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # build it - i seemed to get an error with cross repo registry stuff using the GITHUB_TOKEN var for the pw in the registry login above, so i set up a PAT that definitely has permission and it seems to work for all the operations. meh
    - name: Build and push Docker image
      run: |
        set -e  # Exit on any command failure

        source deps.env

        # todo: docker compose this stuff perhaps ....
        # prepare docker network so gotenberg can talk to resume container.
        docker network create my_network

        # run json server container which will serve the private resume data (its about to become not private, but just the subset we want to publish)
        docker run -d -p 3002:3002 --name jsonserver --network my_network ghcr.io/blademccool/resumedata:$RESUMEDATA_REF
        
        # run resume container - switched to nginx which run on port 80 in the container but i still want to be able to access via port 3000 locally 
        docker run --rm -p 3000:80 -d --name resume --network my_network ghcr.io/blademccool/resume:$RESUME_REF

        # run gotenberg
        docker run --rm -p 80:80 -d --name gotenberg --network my_network gotenberg/gotenberg:8 gotenberg --api-port=80 --api-timeout=10s --libreoffice-disable-routes --log-level=debug

        check_url() {
          local url=$1
          local name=$2
          local max_retries=20
          local delay=1
          local i=0
        
          echo "Waiting for $name at $url ..."
        
          until curl --silent --head --fail "$url" | grep -q "HTTP/.* 2[0-9][0-9]"; do
            if (( i++ >= max_retries )); then
              echo "$name failed to become healthy after $((max_retries * delay)) seconds"
              exit 1
            fi
            sleep $delay
          done
        
          echo "$name is healthy âœ…"
        }
        
        # Run checks
        check_url "http://localhost:3002?baseline=chrono" "JSON Server"
        check_url "http://localhost:3000" "React App (Nginx)"
        check_url "http://localhost:80/health" "Gotenberg"

        # log docker processes
        docker ps
        
        # generate the PDF
        if ! curl -i --fail --request POST http://localhost:80/forms/chromium/convert/url \
          --form "url=http://resume?jsonserver=jsonserver:3002&baseline=chrono" \
          --form "waitForExpression=window.contentLoaded===true" \
          -o ./web/Chris_Hagglund_Resume.pdf; then
        
          echo "PDF generation failed - see the following gotenberg logs:"
          docker logs gotenberg
          exit 1
        fi
        
        echo "PDF generated successfully. (contents remain to be verified)"

        # Run Ghostscript to convert the PDF to text and check for errors
        docker run --rm -v $PWD/web:/workspace minidocks/ghostscript:latest \
          gs -sDEVICE=txtwrite -o /workspace/output.txt /workspace/Chris_Hagglund_Resume.pdf

        echo "PDF text contents:"
        cat web/output.txt #inspect it

        # maybe also check for "Please check the data and try again." if that kind of error from the React project ever happens.
        if grep -q -e "Uncaught runtime errors" -e "Error loading data:" ./web/output.txt; then
          echo "Ghostscript found an error pattern in the PDF, failing the pipeline."
          exit 1
        else
          echo "No known error patterns found in the PDF."
        fi

        # place correct resumedata into local file system for bundling into final site
        mkdir -p replaceinbuild
        curl http://localhost:3002?baseline=chrono -o replaceinbuild/resumedata.json
        # bundle the site up in an nginx image, with the web and resume files copied in
        docker build . -t ghcr.io/blademccool/chws-website:${{ github.sha }} --build-arg RESUME_REF=$RESUME_REF
        docker push ghcr.io/blademccool/chws-website:${{ github.sha }}

    # if we're going to run deploy: below, we should tag latest (do it for repository_dispatch and push event, do not do it for pull_request)
    - name: Tag latest Docker image
      if: github.event_name == 'repository_dispatch' || github.event_name == 'push'
      run: |
        docker tag ghcr.io/blademccool/chws-website:${{ github.sha }} ghcr.io/blademccool/chws-website:latest
        docker push ghcr.io/blademccool/chws-website:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'repository_dispatch' || github.event_name == 'push' #do not deploy in PRs that are not merged (do not deploy if event_name is pull_request)
    steps:
      # deploy using our hosted app id in digital ocean app platform, using the digital ocean pat we created in our account over there.
      # app id bb3fe71e-b9c2-4163-aca2-1d6dd0ac4c02 is our website component in digital ocean app platform.
    - name: Deploy
      run: >
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
          "https://api.digitalocean.com/v2/apps/bb3fe71e-b9c2-4163-aca2-1d6dd0ac4c02/deployments"